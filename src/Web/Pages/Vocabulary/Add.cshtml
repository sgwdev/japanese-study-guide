@page
@model Web.Pages.Vocabulary.AddModel
@using Core;
@{
}

<div>
    <h3>New Word</h3>
    <form method="post">
        <div id="WordForm" class="form-group">
            <div class="form-row">
                <div class="form-group col-md-2">
                    <label>Word</label>
                    <input type="text" asp-for="Word.Label" class="form-control" />
                    <span asp-validation-for="Word.Label"></span>
                </div>
                <div class="form-group col-md-2">
                    <label>Translation</label>
                    <input type="text" asp-for="Word.Translation" class="form-control" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-4">
                    <label>Pronunciation</label>
                    <div class="input-group">
                        <input type="text" id="WordReading" asp-for="Word.Pronunciation" class="form-control" />
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <input type="checkbox" id="IsSpecialReading" asp-for="IsSpecialReading" />
                                <label class="form-check-label pl-2" for="IsSpecialReading">Special</label>
                            </div>
                        </div>
                    </div>
                    <span asp-validation-for="Word.Pronunciation"></span>
                </div>
            </div>
        </div>

        <div id="reading-list" style="display:@(Model.IsSpecialReading ? "none" : "")">
            @if (Model.Word != null && Model.Word.Readings.Count > 0)
            {
                for (int i = 0; i < Model.Word.Label.Length; i++)
                {
                    <div id="reading_@i" class="form-group row">
                        <label class="col-form-label col-md-1">@Model.Word.Label[i] :</label>

                        @{
                            if (Model.Word.Label[i] == Constants.Noma)
                            {
                                <label id="noma_@i" class="col-form-label col-md-3">@(Model.WordKanji[i-1].Readings.Where(r => r.Id == Model.Word.Readings[i-1].ReadingId).Single().Label)</label>
                            }
                            else
                            {
                                if (i < Model.Word.Label.Length - 1 && Model.Word.Label[i + 1] == Constants.Noma)
                                {
                                    int index = i + 1;
                                    <select asp-for="Word.Readings[i].ReadingId" asp-items="@(new SelectList(Model.WordKanji[i].Readings, "Id", "Label"))" onchange="$('#noma_@index').html($('#reading_@i select option:selected').text());" class="custom-select col-md-3"></select>
                                }
                                else
                                {
                                    <select asp-for="Word.Readings[i].ReadingId" asp-items="@(new SelectList(Model.WordKanji[i].Readings, "Id", "Label"))" class="custom-select col-md-3"></select>
                                }
                                <input type="hidden" asp-for="Word.Readings[i].Order" value="@(i+1)" />
                            }
                        }
                    </div>
                }
            }
        </div>

        <input type="submit" value="Save" />
        <a class="nav-link" asp-page="Index">Back</a>
    </form>
</div>

@section Scripts
{
    <script>
        $(function () {
            $('#Word_Label').on('input', function () {
                kanjiReadings = [];
                let current;
                $('#reading-list').empty();

                let label = $('#Word_Label').val().split('');
                label.forEach((kanji, index) => {
                    $('#reading-list').append('<div id="reading_' + index + '" class="form-group row"></div>');
                    $("#reading_" + index).append('<label class="col-form-label col-md-1">' + kanji + ' :</label>');

                    if (kanji == '@Constants.Noma' & index > 0) {
                        $.when(current).then(function () {
                            constructLabel(index);
                        });
                    }
                    else {
                        current = getKanjiReadings(kanji, function (readings) {
                            kanjiReadings[index] = readings;
                            constructReadingForm(readings, index);
                        });
                    }
                });
            });

            $('#IsSpecialReading').on('change', function () {
                if ($('#IsSpecialReading').prop('checked')) {
                    $('#reading-list').hide();
                }
                else {
                    $('#reading-list').show();
                }
            });
        }());

        function getKanjiReadings(inputCaractere, callback) {
            console.log("Ajax call: " + inputCaractere);
            if (inputCaractere != "") {
                return $.ajax({
                    type: "GET",
                    async: true,
                    url: "@Url.Page("/Add")?handler=KanjiSearch",
                    data: { character: inputCaractere },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    error: function (xhr, status, errorThrown) {
                        var err = "Status: " + status + " " + errorThrown;
                        console.log(err);
                    }
                }).done(function (data) {
                    callback(data.readings);
                });
            }
        }

        function constructReadingForm(readings, index) {
            $("#reading_" + index).append(constructSelect(readings, index));
            $("#reading_" + index).append('<input type="hidden" name="Word.Readings[' + index + '].Order" value="' + (index + 1) + '" />');
        }

        // build label for noma case
        function constructLabel(index) {
            $("#reading_" + index).append('<label id="noma_' + index + '" class="col-form-label col-md-3">' + $("#reading_" + (index - 1) + " select option:selected").text() + '</label>');

            $("#reading_" + (index - 1)).on('change', 'select', function () {
                $("#noma_" + index).html($("#reading_" + (index - 1) + " select option:selected").text());
            });
        }

        function constructSelect(elements, index) {
            var html = '<select class="custom-select col-md-3" name="Word.Readings[' + index + '].ReadingId">';

            elements.forEach((item, index) => {
                html += '<option value="' + item.id + '">' + item.label + '</option>';
            });
            html += "</select>";

            return html;
        }
    </script>
}
