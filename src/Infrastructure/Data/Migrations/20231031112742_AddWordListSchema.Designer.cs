// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231031112742_AddWordListSchema")]
    partial class AddWordListSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.KanjiAggregate.Kanji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("character");

                    b.HasKey("Id")
                        .HasName("pk_kanji");

                    b.HasIndex("Character")
                        .IsUnique()
                        .HasDatabaseName("ix_kanji_character");

                    b.ToTable("kanji");
                });

            modelBuilder.Entity("Core.Entities.KanjiAggregate.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KanjiId")
                        .HasColumnType("integer")
                        .HasColumnName("kanji_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("label");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_reading");

                    b.HasIndex("KanjiId")
                        .HasDatabaseName("ix_reading_kanji_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_reading_type_id");

                    b.ToTable("reading");
                });

            modelBuilder.Entity("Core.Entities.KanjiAggregate.ReadingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_reading_type");

                    b.ToTable("reading_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "On"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Kun"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Special"
                        });
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("label");

                    b.Property<string>("Pronunciation")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pronunciation");

                    b.Property<string>("Translation")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("translation");

                    b.HasKey("Id")
                        .HasName("pk_word");

                    b.ToTable("word");
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.WordList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_word_list");

                    b.ToTable("word_list");
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.WordListMapping", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("WordListId")
                        .HasColumnType("integer")
                        .HasColumnName("word_list_id");

                    b.HasKey("WordId", "WordListId")
                        .HasName("pk_word_list_word");

                    b.HasIndex("WordListId")
                        .HasDatabaseName("ix_word_list_word_word_list_id");

                    b.ToTable("word_list_word", (string)null);
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.WordReading", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer")
                        .HasColumnName("word_id");

                    b.Property<int>("ReadingId")
                        .HasColumnType("integer")
                        .HasColumnName("reading_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("WordId", "ReadingId", "Order")
                        .HasName("pk_word_reading");

                    b.HasIndex("ReadingId")
                        .HasDatabaseName("ix_word_reading_reading_id");

                    b.ToTable("word_reading");
                });

            modelBuilder.Entity("Core.Entities.KanjiAggregate.Reading", b =>
                {
                    b.HasOne("Core.Entities.KanjiAggregate.Kanji", "Kanji")
                        .WithMany("Readings")
                        .HasForeignKey("KanjiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reading_kanji_kanji_id");

                    b.HasOne("Core.Entities.KanjiAggregate.ReadingType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reading_reading_type_type_id");

                    b.Navigation("Kanji");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.WordListMapping", b =>
                {
                    b.HasOne("Core.Entities.VocabularyAggregate.Word", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_list_word_word_word_id");

                    b.HasOne("Core.Entities.VocabularyAggregate.WordList", null)
                        .WithMany()
                        .HasForeignKey("WordListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_list_word_word_list_word_list_id");
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.WordReading", b =>
                {
                    b.HasOne("Core.Entities.KanjiAggregate.Reading", "Reading")
                        .WithMany("Words")
                        .HasForeignKey("ReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_reading_reading_reading_id");

                    b.HasOne("Core.Entities.VocabularyAggregate.Word", "Word")
                        .WithMany("Readings")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_word_reading_word_word_id");

                    b.Navigation("Reading");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Core.Entities.KanjiAggregate.Kanji", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("Core.Entities.KanjiAggregate.Reading", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Core.Entities.VocabularyAggregate.Word", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
